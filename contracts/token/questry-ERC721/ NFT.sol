// SPDX-License-Identifier: MIT

pragma solidity ^0.8.9;


import "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol";
import { AccessControl } from "@openzeppelin/contracts/access/AccessControl.sol";
import { Ownable } from '@openzeppelin/contracts/access/Ownable.sol';
import { Counters } from "@openzeppelin/contracts/utils/Counters.sol";
import { Strings } from "@openzeppelin/contracts/utils/Strings.sol";


contract NFT is 
    ERC721,
    ERC721URIStorage,
    Ownable,
    AccessControl
{
    using Counters for Counters.Counter;
    using Strings for uint256;

    bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");

    Counters.Counter private _tokenIdTracker;

    /**
     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the
     * account that deploys the contract.
     *
     * Token URIs will be autogenerated based on `baseURI` and their token IDs.
     * See {ERC721-tokenURI}.
     */
    constructor(
        string memory name,
        string memory symbol,
        string memory defaultURI,
        address admin,
        address Trustedforwarder
    ) 
        ERC721(name, symbol) 
    {
        _tokenIdTracker.increment();
        _setupRole(DEFAULT_ADMIN_ROLE, admin);
        _setupRole(MINTER_ROLE, admin);
        _transferOwnership(admin);
    }

    /**
     * @dev Creates a new token for `to`. Its token ID will be automatically
     * assigned (and available on the emitted {IERC721-Transfer} event), and the token
     * URI autogenerated based on the base URI passed at construction.
     *
     * See {ERC721-_mint}.
     *
     * Requirements:
     *
     * - the caller must have the `MINTER_ROLE`.
     */
    function mint(address _to, string memory _tokenURI) public {
        require(hasRole(MINTER_ROLE, _msgSender()), "ERC721: must have minter role to mint");
        _mintToken(_to, _tokenURI);
    }

    function Bulkmint(address[] calldata _tos, string[] memory _tokenURIs) public {
        require(hasRole(MINTER_ROLE, _msgSender()), "ERC721: must have minter role to mint");
        for(uint i =0;i < _tos.length;i++){
            _mintToken(_tos[i], _tokenURIs[i]);
        }
    }

    function _mintToken(address _to, string memory _tokenURI) internal {
        _mint(_to, _tokenIdTracker.current());
        _setTokenURI(_tokenIdTracker.current(),_tokenURI);
        _tokenIdTracker.increment();
    }

    // The following functions are overrides required by Solidity.
    function _burn(uint256 tokenId) internal override(ERC721, ERC721URIStorage) {
        super._burn(tokenId);
    }
    // The following functions are overrides required by Solidity.
    function tokenURI(uint256 tokenId)
        public
        view
        override(ERC721, ERC721URIStorage)
        returns (string memory)
    {
        return super.tokenURI(tokenId);
    }


    /**
     * @dev See {IERC165-supportsInterface}.
     * 
     * - Contracts can inherit from multiple parent contracts.
     *   When a function is called that is defined multiple times in
     *   different contracts, parent contracts are searched from
     *   right to left, and in depth-first manner.
     *
     * - BasicERC721.supportsInterface() returns ERC721.supportsInterface();
     */
    function supportsInterface(bytes4 interfaceId)
        public
        view
        virtual
        override(AccessControl, ERC721)
        returns (bool)
    {
        return super.supportsInterface(interfaceId);
    }
}