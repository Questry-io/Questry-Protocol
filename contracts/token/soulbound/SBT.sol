// SPDX-License-Identifier: MIT
pragma solidity ^0.8.9;

import { ERC721, IERC721, Context } from "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import { AccessControl } from "@openzeppelin/contracts/access/AccessControl.sol";
import { Counters } from "@openzeppelin/contracts/utils/Counters.sol";
import { Strings } from "@openzeppelin/contracts/utils/Strings.sol";
import { ERC2771Context } from "@openzeppelin/contracts/metatx/ERC2771Context.sol";
import { ISBT } from "../../interface/token/ISBT.sol";
import { IPJManager } from "../../interface/pjmanager/IPJ-Manager.sol";

contract SBT is
    ISBT,
    ERC721,
    AccessControl,
    ERC2771Context
{
    using Counters for Counters.Counter;
    using Strings for uint256;

    bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");
    bytes32 public constant URIUPDATER_ROLE = keccak256("URIUPDATER_ROLE");
    bytes32 public constant BURNER_ROLE = keccak256("BUNER_ROLE");

    Counters.Counter private _tokenIdTracker;

    string public _baseTokenURI;
    address public immutable PJManagerContract;

    bool public isTransfable = false;

    /**
     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE`, `URIUPDATETR_ROLE` and
     * `BURNER_ROLE` to the account that deploys the contract.
     *
     * Token URIs will be autogenerated based on `baseURI` and their token IDs.
     * See {ERC721-tokenURI}.
     */
    constructor(
        string memory name,
        string memory symbol,
        string memory baseTokenURI,
        address pjmanagerContract,
        address admin,
        address Trustedforwarder
    ) ERC721(name, symbol) 
      ERC2771Context(Trustedforwarder)
    {
        _baseTokenURI = baseTokenURI;
        PJManagerContract = pjmanagerContract;
        _tokenIdTracker.increment();

        _setupRole(DEFAULT_ADMIN_ROLE, admin);
        _setupRole(MINTER_ROLE, admin);
        _setupRole(URIUPDATER_ROLE, admin);
        _setupRole(BURNER_ROLE, admin);
    }

    /**
     * @dev Resolve metadata from Kaname Protocol DID for the board which tokenId is `tokenId`.
     * Example: https://example.kaname.io/did:kaname:
     * DID spec: https://github.com/KanameProtocol/did-kaname-spec
     * See {IERC721Metadata-tokenURI}
     */
    function tokenURI(uint256 tokenId) public view virtual override(ERC721) returns (string memory) {
        require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
        return string(abi.encodePacked(_baseURI(), did(tokenId)));
    }

    function _baseURI() internal view virtual override(ERC721) returns (string memory) {
        return _baseTokenURI;
    }

    function updateBaseTokenURI(string memory _uri) external {
        require(hasRole(URIUPDATER_ROLE, _msgSender()), "SBT: must have URI updater role to update URI");
        _baseTokenURI = _uri;
    }

    /// @inheritdoc ISBT
    function did(uint256 tokenId) public view returns (string memory) {
        address member = ownerOf(tokenId);
        try IPJManager(PJManagerContract).resolveBoardId(address(this), tokenId) returns (uint256 _boardId) {
            string memory boardId = _boardId.toString();
            return string(abi.encodePacked(didSchema(), ":", didNamespace(), ":", didMember(member), ":", boardId));
        } catch (bytes memory reason) {
            if (reason.length == 0) {
                revert("SBT: failed to resolveBoardId for unexpected reason");
            } else {
                /// @solidity memory-safe-assembly
                assembly {
                    revert(add(32, reason), mload(reason))
                }
            }
        }
    }

    /// @inheritdoc ISBT
    function didSchema() public pure returns (string memory) {
        return "did:kaname";
    }

    /// @inheritdoc ISBT
    function didNamespace() public view returns (string memory) {
        string memory chainId = block.chainid.toString();
        string memory hexPJManager = Strings.toHexString(uint160(PJManagerContract), 20);
        return string(abi.encodePacked("eip155:", chainId, ":", hexPJManager));
    }

    /**
     * @dev Returns Kaname Protocol DID spec's member.
     */
    function didMember(address member) public view returns (string memory) {
        string memory chainId = block.chainid.toString();
        string memory hexMember = Strings.toHexString(uint160(member), 20);
        return string(abi.encodePacked("eip155:", chainId, ":", hexMember));
    }

    /**
     * @dev Creates a new token for `to`. Its token ID will be automatically
     * assigned (and available on the emitted {IERC721-Transfer} event), and the token
     * URI autogenerated based on the base URI passed at construction.
     *
     * See {ERC721-_mint}.
     *
     * Requirements:
     *
     * - the caller must have the `MINTER_ROLE`.
     */
    function mint(address to) public {
        require(hasRole(MINTER_ROLE, _msgSender()), "SBT: must have minter role to mint");

        uint256 tokenId = _tokenIdTracker.current();
        _mint(to, tokenId);
        _tokenIdTracker.increment();

        IPJManager(PJManagerContract).registerBoard(address(this), tokenId);
    }

    function Bulkmint(address[] calldata tos) public {
        for(uint i =0;i < tos.length;i++){
            mint(tos[i]);
        }
    }

    function burn(uint256 tokenId) public {
        require(hasRole(BURNER_ROLE, _msgSender()),"SBT: must have burner role to burn");
        _burn(tokenId);
    }

    function Bulkburn(uint256[] calldata tokenIds) public {
        for(uint i =0;i < tokenIds.length;i++){
            burn(tokenIds[i]);
        }
    }

    function _transfer(address from, address to, uint256 tokenId) internal virtual override {
        require(isTransfable,'SBT: Err Token is SBT');
        super._transfer(from,to,tokenId);
    }

    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual override {
        require(isTransfable,'SBT: Err Token is SBT');
        super._setApprovalForAll(owner,operator,approved);
    }

    function _approve(address to, uint256 tokenId) internal virtual override {
        require(isTransfable || to == address(0),'SBT: Err Token is SBT');
        super._approve(to,tokenId);
    }

    function _msgData()
        internal
        view
        override(ERC2771Context,Context)
        returns (bytes calldata)
    {
        return ERC2771Context._msgData();
    }

    function _msgSender()
        internal
        view
        override(ERC2771Context,Context)
        returns (address sender)
    {
        return ERC2771Context._msgSender();
    }

    /**
     * @dev See {IERC165-supportsInterface}.
     * 
     * - Contracts can inherit from multiple parent contracts.
     *   When a function is called that is defined multiple times in
     *   different contracts, parent contracts are searched from
     *   right to left, and in depth-first manner.
     *
     * - BasicERC721.supportsInterface() returns ERC721.supportsInterface();
     */
    function supportsInterface(bytes4 interfaceId)
        public
        view
        virtual
        override(AccessControl, ERC721)
        returns (bool)
    {
        return super.supportsInterface(interfaceId);
    }
}