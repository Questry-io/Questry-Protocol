// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

import {IContributionPool} from "contracts/interface/pjmanager/IContributionPool.sol";

/**
 * @title Board interface
 */
interface IBoard {
  /**
   * @dev Creates a new token for `to`. Its token ID will be automatically
   * assigned (and available on the emitted {IERC721-Transfer} event), and the token
   * URI autogenerated based on the base URI passed at construction.
   *
   * See {ERC721-_mint}.
   *
   * Requirements:
   *
   * - the caller must have the `MINTER_ROLE`.
   */
  function mint(address _to) external;

  /**
   * @dev Bulk mint new tokens for `tos`.
   *
   * Requirements:
   *
   * - the caller must have the `MINTER_ROLE`.
   */
  function bulkMint(address[] calldata _tos) external;

  /**
   * @dev Burn `_tokenId` token.
   *
   * Requirements:
   *
   * - the caller must have the `BURNER_ROLE`.
   */
  function burn(uint256 _tokenId) external;

  /**
   * @dev Bulk burn `_tokenIds` tokens.
   *
   * Requirements:
   *
   * - the caller must have the `BURNER_ROLE`.
   */
  function bulkBurn(uint256[] calldata _tokenIds) external;

  /**
   * @dev Return if any boarding member exists or not.
   */
  function boardingMembersExist() external returns (bool);

  /**
   * @dev Return all boarding members.
   */
  function getBoardingMembers() external returns (address[] memory);

  /**
   * @dev Returns if `_account` has the token, in other words, it is a boarding member.
   * Note that only one token can be minted from the same Board contract per account.
   */
  function isBoardingMember(address _account) external view returns (bool);

  /**
   * @dev Returns contribution pool associated with the board.
   */
  function getContributionPool() external view returns (IContributionPool);
}
